#! /usr/bin/env python
#
# Support module generated by PAGE version 4.10
# In conjunction with Tcl version 8.6
#    Jan 29, 2018 05:02:43 PM
#    Feb 02, 2018 04:53:00 AM
#    Feb 02, 2018 05:00:31 AM
#    Feb 03, 2018 04:45:02 AM
#    Feb 03, 2018 04:47:15 AM
#    Feb 03, 2018 07:04:46 AM
#    Feb 03, 2018 07:05:03 AM
#    Feb 03, 2018 07:19:22 AM
#    Feb 03, 2018 08:32:39 AM
#    Feb 03, 2018 08:41:53 AM
#    Feb 03, 2018 10:23:33 AM

from dbMySql import c

try:
    from Tkinter import *
except ImportError:
    from tkinter import *
    from tkinter import filedialog

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

def set_Tk_var():
    global che44
    che44 = StringVar()
    global che45
    che45 = StringVar()
    global spinbox
    spinbox = StringVar()
    global che66
    che66 = StringVar()
    global entry1txt
    entry1txt = StringVar()
    global che67
    che67 = StringVar()

def button_press(event):

    widget = event.widget

    element = widget.identify(event.x, event.y)

    if "close" in element:
        index = widget.index("@%d,%d" % (event.x, event.y))
        widget.state(['pressed'])
        widget._active = index

def button_release(event):

    widget = event.widget

    if not widget.instate(['pressed']):
            return

    element = widget.identify(event.x, event.y)

    try:
        index = widget.index("@%d,%d" % (event.x, event.y))
    except TclError:
        pass

    if "close" in element and widget._active == index:
        widget.forget(index)
        widget.event_generate("<<NotebookTabClosed>>")

    widget.state(["!pressed"])
    widget._active = None

def dbclosebtn(p1):
    sys.stderr = RedirectText(w.ErrorDisplay)
    sys.stdout = RedirectText(w.OutputDisplay)
    c.dbclose(p1)

def dbconnectbtn(p1):
    sys.stderr = RedirectText(w.ErrorDisplay)
    sys.stdout = RedirectText(w.OutputDisplay)
    c.dbconnect(p1)

def enterbtn(p1):
    sys.stderr = RedirectText(w.ErrorDisplay)
    sys.stdout = RedirectText(w.OutputDisplay)
    eval(w.Entry1.get())
    sys.stdin.flush()

class RedirectText(object):
    def __init__(self, text_widget):
        self.text_space = text_widget

    def write(self, string):
        self.text_space.config(state=NORMAL)
        self.text_space.insert("end", string)
        self.text_space.see("end")
        self.text_space.config(state=DISABLED)

def open_file():
    """
    Open a file, read it line-by-line and print out each line to
    the text control widget
    """
    options = {}
    options['defaultextension'] = '.txt'
    options['filetypes'] = [('all files', '.*'), ('text files', '.txt')]
    options['initialdir'] = '/home'
    options['parent'] = root
    options['title'] = "Open a file"

    with filedialog.askopenfile(mode='r', **options) as f_handle:
        for line in f_handle:
            print(line)

def mouse_over(event):

    widget = event.widget
    element = widget.identify(event.x, event.y)

    if "close" in element:
        widget.state(['alternate'])

    else:
        widget.state(['!alternate'])

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    from gui.firstgui import firstgui

    firstgui.vp_start_gui()


































